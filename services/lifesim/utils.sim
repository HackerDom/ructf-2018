class utils;;

external class textbuilder;

integer procedure largest2pow(k);
	integer k;
	largest2pow := gcd(k, 1073741824);


integer procedure gcd(a, b);
	integer a, b;
begin
	integer c;
	while a <> 0 do
	begin
		c := mod(b, a);
		b := a;
		a := c;
	end;
	gcd := b;
end;

procedure die(s); 
	text s;
begin
	outText(s); 
	outImage;
	outText("Exit");
	outImage;
	terminate_program;
end;

boolean procedure startsWith(s, t);
	text s, t;
begin
	s.setpos(1);
	t.setpos(1);
	while t.more do
	begin
		if not s.more then
		begin
			startsWith := False;
			goto exit;
		end;
		if s.getchar <> t.getchar then
		begin
			startsWith := False;
			goto exit;
		end;
	end;
	startsWith := True;
exit:
end;

text procedure subend(t, pos);
	text t; integer pos;
	subend :- t.sub(pos, t.length - pos + 1);

text procedure base64decode(s);
	text s;
begin
	ref(textbuilder) builder;
	integer i, buffer, symbols, equality;
	character ch;
	builder :- new textbuilder;
	symbols := 0;
	equality := 0;
	s.setpos(1);
	while s.more do
	begin
		ch := s.getchar;
		buffer := buffer * 64;
		symbols := symbols + 1;
		if ('A' <= ch) and (ch <= 'Z') then
			buffer := buffer + rank(ch) - rank('A')
		else if ('a' <= ch) and (ch <= 'z') then
			buffer := buffer + rank(ch) - rank('a') + 26
		else if ('0' <= ch) and (ch <= '9') then
			buffer := buffer + rank(ch) - rank('0') + 52
		else if ch = '+' then
			buffer := buffer + 62
		else if ch = '/' then
			buffer := buffer + 63
		else 
		begin
			if ch = '=' then
				equality := equality + 1;
			symbols := symbols - 1;
		end;
		if symbols = 4 then
		begin
			builder :- builder
				.addChar(char(buffer // (256 * 256)))
				.addChar(char(mod(buffer // 256, 256)))
				.addChar(char(mod(buffer, 256)));
			buffer := 0;
			symbols := 0;
		end;
	end;
	if symbols <> 0 then
	begin
		builder :- builder.addChar(char(buffer // (256 * 256)));
		if equality < 2 then 
			builder :- builder.addChar(char(mod(buffer // 256, 256)));
		if equality < 1 then
			builder :- builder.addChar(char(mod(buffer, 256)));
	end;

	base64decode :- builder.totext;
end;

procedure getCredentials(s, user, password);
	name user, password;
	text s, user, password;
begin
	s.setpos(1);
	while s.more do
	begin
		if s.getchar = ':' then
		begin
			user :- s.sub(1, s.pos - 2);
			password :- subend(s, s.pos);
			goto exit;
		end;
	end;
	user :- notext;
	password :- notext;
exit:
end;

 integer procedure parseInt(s);
	text s;
 begin
	integer res;
	character ch;
	res := 0;
	s.setpos(1);
	while s.more do
	begin
		ch := s.getchar;
		if ('0' <= ch) and (ch <= '9') then
			res := res * 10 + rank(ch) - rank('0');
	end;
	parseInt := res;
 end;

text procedure toText(n);
	integer n;
begin
	integer len, nn;
	text res;
	nn := n;
	len := if n = 0 then 1 else 0;
	while n <> 0 do
	begin
		len := len + 1;
		n := n // 10;
	end;
	res :- blanks(len);
	res.putint(nn);
	toText :- res;
end;

text procedure getCrossed(s, seed);
	name seed;
	text s; integer seed;
begin
	text left, right;
	left :- blanks((s.length + 1) // 2 * 8);
	right :- blanks((s.length + 1) // 2 * 8);
	s.setpos(1);
	left.setpos(1);
	right.setpos(1);
	while s.more do
	begin
		integer i, j, ch;
		for j := 1, 2 do
		begin
			ch := if s.more then rank(s.getchar) else 0;
			for i := 1 step 2 until 8 do
			begin
				left.putchar(if mod(ch, 2) = 0 then '0' else '1');
				ch := ch // 2;
				right.putchar(if mod(ch, 2) = 0 then '0' else '1');
				ch := ch // 2;
			end;
		end;
	end;

	getCrossed :- pack(merge(left, right, seed));
end;

text procedure pack(t);
	text t;
begin
	text res;
	res :- blanks((t.length + 7) // 8);
	t.setpos(1);
	res.setpos(1);
	while res.more do
	begin
		integer ch, i;
		ch := 0;
		for i := 1 step 1 until 8 do
		begin
			ch := ch * 2;
			if t.more then
				ch := ch + (if t.getchar = '0' then 0 else 1);
		end;
		res.putchar(char(ch));
	end;
	pack :- res;
end;

text procedure merge(left, right, seed);
	name seed;
	text left, right; integer seed;
begin
	procedure swap(l, r);
		name l, r;
		text l, r;
	begin
		text tmp;
		tmp :- l;
		l :- r;
		r :- tmp;
	end;

	integer cutsCount, i, j;
	integer array cuts(1 : 2);
	text res;

	cutsCount := randint(0, 2, seed);
	for i := 1 step 1 until cutsCount do
		cuts(i) := randint(1, left.length // 2, seed) * 2;

	if draw(0.5, seed) then
		swap(left, right);

	res :- blanks(left.length);
	res.setpos(1);
	j := 1;
	for i := 1 step 1 until left.length do
	begin
		left.setpos(i);
		res.putchar(left.getchar);
		if j <= cutsCount then
			if i = cuts(j) then
			begin
				swap(left, right);
				j := j + 1;
			end;
	end;

	merge :- res;
end;

text procedure toHex(ch);
	character ch;
begin
	character procedure toHexDigit(n);
		integer n;
		toHexDigit := if n < 10 then char(n + rank('0')) else char(n - 10 + rank('a'));

	integer code;
	text res;
	res :- blanks(2);
	res.setpos(1);
	code := rank(ch);
	res.putchar(toHexDigit(code // 16));
	res.putchar(toHexDigit(mod(code, 16)));

	toHex :- res;
end;

text procedure encode(t);
	text t;
begin
	ref(textbuilder) res;
	res :- new textbuilder;

	t.setpos(1);
	while t.more do
	begin
		character ch;
		ch := t.getchar;
		if (' ' <= ch) and (ch <= '~') and (ch <> '%') then
			res :- res.addChar(ch)
		else
			res :- res.addChar('%').addText(tohex(ch));
	end;

	encode :- res.totext;
end;
